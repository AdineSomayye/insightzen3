#!/usr/bin/env python
"""
Django's command-line utility for administrative tasks.
This file is generated manually to allow the application to run
inside a Docker container without relying on django-admin to scaffold
the project. It provides the same entry point as the default
manage.py generated by ``django-admin startproject``.
"""
import os
import sys


def main() -> None:
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        # Import here so that Django is available after setting the settings module
        from django.core.management import execute_from_command_line, call_command
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    # Automatically run migrations when the runserver command is invoked. This
    # ensures that the necessary tables (such as auth_user) exist without
    # requiring a manual migration step. It is guarded so that other
    # management commands (like makemigrations, collectstatic, etc.) are not
    # affected.
    if len(sys.argv) > 1 and sys.argv[1] == 'runserver':
        try:
            call_command('migrate', interactive=False)
        except Exception:
            # Ignore migration errors so that the server still starts; they
            # will surface as runtime errors if critical tables are missing.
            pass
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()